/*
 * timer_delay.h
 *
 *  Created on: Jul 31, 2022
 *      Author: Mahmoud_Mohamed
 */

#ifndef TIMER_DELAY_H_
#define TIMER_DELAY_H_

/*====================== Includes ======================*/
#include <stdint.h>

#include <avr/io.h>
#include <avr/interrupt.h>

/*====================== Enums ======================*/
typedef enum Overflow_flag{
	MILLI, MICRO
}OVERFLOW_FLAG;

typedef enum timer0_is_busy{
	Busy, NotBusy=!Busy
}TIMER0_IS_BUSY;

/*====================== Static variables ======================*/
// This variable will be incremented every one micro second.
static volatile uint32_t Overflow_Every_1us = 0;

// this variable will be incremented every one milli second.
static volatile uint32_t Overflow_Every_1ms = 0;

// Flag to get the current state of Timer0.
static TIMER0_IS_BUSY Timer0ISBusyFlag = NotBusy;

// Flag to control timer overflow.
static OVERFLOW_FLAG Timer0_Overflow_TypeFlag = MILLI;

/*====================== Private Inline functions  ======================*/
// Hardware Registers Set and Clear functions.
static inline void Set_Bit(volatile uint8_t* reg, uint8_t bit){
	*reg |=  (1<<bit);
}

static inline void Clear_Bit(volatile uint8_t* reg, uint8_t bit){
	*reg &= ~(1<<bit);
}

// Overflow_Every_1us Variable Set, and Get functions.
static inline   void   Set_OverflowEvery_1us(uint32_t value){
	Overflow_Every_1us = value;
}

static inline uint32_t Get_OverflowEvery_1us(void){
	return Overflow_Every_1us ;
}

// Overflow_Every_1ms Variable Set, and Get functions.
static inline   void   Set_OverflowEvery_1ms(uint32_t value){
	Overflow_Every_1ms = value;
}

static inline uint32_t Get_OverflowEvery_1ms(void){
	return Overflow_Every_1ms ;
}

// Timer0_Overflow_Type_Flag Variable Set, and Get functions.
static inline void Set_Timer0_Overflow_TypeFlag(OVERFLOW_FLAG flag){
	Timer0_Overflow_Type_Flag = flag;
}

static inline OVERFLOW_FLAG Get_Timer0_Overflow_TypeFlag(void){
	return Timer0_Overflow_Type_Flag ;
}

static inline void Timer0_ISBusy(void){

}
/*====================== Public Functions definitions ======================*/
void Timer0_Delay_us(uint32_t time);

void Timer0_Delay_ms(uint32_t time);

/*====================== ISR Function ======================*/
ISR(TIMER0_OVF_vect){

}

#endif /* TIMER_DELAY_H_ */
