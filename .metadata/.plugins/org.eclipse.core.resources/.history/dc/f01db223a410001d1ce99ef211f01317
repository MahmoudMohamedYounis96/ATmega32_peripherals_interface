/*
 * timer_delay.h
 *
 *  Created on: Jul 31, 2022
 *      Author: Mahmoud_Mohamed
 */

#ifndef TIMER_DELAY_H_
#define TIMER_DELAY_H_

/*====================== Includes ======================*/
#include <stdint.h>

#include <avr/io.h>
#include <avr/interrupt.h>

/*====================== Enums ======================*/
typedef enum Overflow_flag{
	MILLI, MICRO
}OVERFLOW_FLAG;

/*====================== Static variables ======================*/
// This variable will be incremented every one micro second.
static volatile uint32_t Overflow_Every_1us = 0;

// this variable will be incremented every one milli second.
static volatile uint32_t Overflow_Every_1ms = 0;

// Flag to control timer overflow.
static OVERFLOW_FLAG Timer0_Overflow_Type_Flag = MILLI;
/*====================== Inline functions  ======================*/
// Hardware Registers Set and Clear functions.
inline void set_bit(volatile uint8_t* reg, uint8_t bit)    { *reg |=  (1<<bit); }

inline void clear_bit(volatile uint8_t* reg, uint8_t bit)  { *reg &= ~(1<<bit); }

// Overflow_Every_1us Variable Set, and Get functions.
inline void     Set_Overflow_Every_1us(uint32_t value) { Overflow_Every_1us = value; }
inline uint32_t Get_Overflow_Every_1us(void)           { return Overflow_Every_1us ; }

// Overflow_Every_1ms Variable Set, and Get functions.
inline void     Set_Overflow_Every_1ms(uint32_t value) { Overflow_Every_1ms = value; }
inline uint32_t Get_Overflow_Every_1ms(void)           { return Overflow_Every_1ms ; }

/*====================== Functions definitions ======================*/
void Timer0_Delay_us(uint32_t time);

void Timer0_Delay_ms(uint32_t time);

/*====================== ISR Function ======================*/
ISR(TIMER0_OVF_vect){

}

#endif /* TIMER_DELAY_H_ */
